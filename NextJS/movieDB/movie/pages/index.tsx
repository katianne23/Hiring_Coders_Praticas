import React, { FormEvent, useEffect, useState} from 'react';
import { useRouter } from 'next/router';
import Head from 'next/head';
import Image from 'next/image';
import styles from '../styles/Home.module.css';
import Pagination  from '../components/Pagination';
import { args } from '../config/api';

interface IPropsComponent {
  list: any[],
  page: number,
  total_pages: number,
  search: boolean,
  searchParam: string,
}

const Home = ({ list, page, total_pages, searchParam }:
IPropsComponent) => {

  // Initialization of the state that stores the movie list data returned by the API
  const [data, setData] = useState<any[]>([]);
  const router = useRouter();

  // Initialization of the state that stores the search input value
  const [search, setSearch] = useState(searchParam);

  // Initialization of the state that stores the value of the searchParam property
  const [result, setResult] = useState<undefined | string>(undefined);

  const handleChange = (event: React.ChangeEvent<unknown>, value: number) => {
    if (search) {
      // Redirect to page passing search and value parameters
      return router.push(`?search=${search}&page=${value}`);
    } else {
      return router.push(`?page=${value}`);
    }
  }

  async function handleSearchMovie(e: FormEvent<HTMLFormElement>) {
    // disable default form reload
    e.preventDefault();
    return router.push(`/?search=${search}&page=1`);
  }

  useEffect(() => {

    // checks if there is any change in the list, and then the value of the list is stored again
    setData(list);

    // checks if there is any state change in searchParam, if so it sets the value again
    setResult(searchParam);
  }, [list, searchParam])

  return (
    <div className={styles.container}>
      <Head>
        <title>NextJS MovieDB Project</title>
        <meta name="description" content="Generated by create next app"/>
        <link rel="icon" href="/favicon.ico"/>
      </Head>

      <div>
        <div className={styles.formSearch}>
          <form onSubmit={handleSearchMovie}>
            <input type="text" placeholder="Search for a movie or a TV Series..." onChange={(e) => setSearch(e.target.value)}/>
            <button type="submit">Search</button>
          </form>
        </div>

        <div className={styles.titleContainer}>
          {result ? (<h1>Results for: {`${result}`}</h1>)
          : (<h1>Popular Movies</h1>)}
        </div>

        <div className={styles.moviesContainer}>
          {data.map((item: any, index: number) => (
            <div key={index}>
              <Image src={`http://image.tmdb.org/t/p/original${item.poster_path}`}
                alt="image movie"
                width={350}
                height={400}/>

              <div>
                {item.vote_average ? (
                  <p>
                    Rating: <span>{item.vote_average}</span>
                  </p>
                ) : (
                  <p>
                    Rating: <span>No rating</span>
                  </p>
                )}
              </div>
            </div>
          ))}

        </div>
      </div>

      <div className={styles.paginationContainer}>
        <Pagination
          total_pages={total_pages}
          page={page}
          handleChange={handleChange}
        />
      </div>
    </div>
  )
}

export default Home

export async function getServerSideProps({
  query
}: {
  query: {
    page?: string
    search?: string
  }
}) {
  if (query.search) {
    // A GET request is made to the server, returning the movie data that was passed in the query param search
    const response = await fetch(
      `${args.base_url}/search/movie?api_key=${args.api_key}&query=${query.search}&page=${query.page ? query.page : 1}&language=pt-BR`
    );

    const { results, page, total_pages } = (await response.json()) as any;

    return {
      props: {
        list: results,
        page,
        total_pages,
        searchParam: query.search
      }
    }
  } else {
    const response = await fetch(
      `${args.base_url}/trending/movie/week?api_key=${args.api_key}&page=${query.page ? query.page : 1}`
    );

    const { results, page, total_pages } = (await response.json()) as any;

    return {
      props: {
        list: results,
        page: page,
        total_pages: total_pages,
        searchParam: ""
      }
    }
  }
}